name: CI/CD Docker with Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/uptime-checker:latest
          build-args: |
            GLOBALPING_API_KEY=${{ secrets.GLOBALPING_API_KEY }}
            GLOBALPING_API_KEY2=${{ secrets.GLOBALPING_API_KEY2 }}
            GLOBALPING_API_KEY3=${{ secrets.GLOBALPING_API_KEY3 }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            if [ ! -d "uptime-checker" ]; then
              git clone https://github.com/${{ github.repository }}.git uptime-checker
            fi
            cd uptime-checker
            git pull

            # Определяем текущий и новый цвет
            if docker ps --format '{{.Names}}' | grep -q 'app-blue'; then
              CURRENT_COLOR="blue"
              NEW_COLOR="green"
            else
              CURRENT_COLOR="green"
              NEW_COLOR="blue"
            fi
            
            echo "Current color: $CURRENT_COLOR, New color: $NEW_COLOR"

            # Запускаем новую версию
            docker-compose pull app-$NEW_COLOR
            docker-compose up -d --no-deps --build app-$NEW_COLOR

            # Ждем запуска и проверяем
            sleep 30
            
            # Переключаем трафик
            sed -i "s/app-$CURRENT_COLOR/app-$NEW_COLOR/g" docker/nginx/default.conf
            docker-compose exec nginx nginx -s reload

            # Останавливаем старую версию
            docker-compose stop app-$CURRENT_COLOR
            
            # Очищаем старые образы
            docker image prune -f