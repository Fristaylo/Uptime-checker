name: CI/CD Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/uptime-checker:latest
          build-args: |
            DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
            GLOBALPING_API_KEY=${{ secrets.GLOBALPING_API_KEY }}
            GLOBALPING_API_KEY2=${{ secrets.GLOBALPING_API_KEY2 }}
            GLOBALPING_API_KEY3=${{ secrets.GLOBALPING_API_KEY3 }}
            GLOBALPING_API_KEY4=${{ secrets.GLOBALPING_API_KEY4 }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # Clone the repository if it doesn't exist
            if [ ! -d "uptime-checker" ]; then
              git clone https://github.com/${{ github.repository }}.git uptime-checker
            fi
            cd uptime-checker
            # Force update to the latest version
            git reset --hard HEAD
            git pull
            # Install/Update docker compose plugin
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            sudo curl -SL "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            # Create .env file
            echo "DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" > .env
            echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> .env
            echo "GLOBALPING_API_KEY=${{ secrets.GLOBALPING_API_KEY }}" >> .env
            echo "GLOBALPING_API_KEY2=${{ secrets.GLOBALPING_API_KEY2 }}" >> .env
            echo "GLOBALPING_API_KEY3=${{ secrets.GLOBALPING_API_KEY3 }}" >> .env
            echo "GLOBALPING_API_KEY4=${{ secrets.GLOBALPING_API_KEY4 }}" >> .env
            # Stop and disable system nginx if it exists
            sudo systemctl stop nginx || true
            sudo systemctl disable nginx || true
            # Pull the latest image from Docker Hub
            docker compose pull
            # Run the new container from the pulled image
            docker compose up -d
